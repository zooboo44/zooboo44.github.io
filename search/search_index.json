{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Purpose","text":"<p>This site is a portfolio of my work in homelab development, technology projects, and computer science. It documents my progress, showcases technical skills, and highlights areas of exploration and experimentation. The goal is to provide a clear record of my capabilities, interests, and growth as I continue building, learning, and refining my expertise.</p>"},{"location":"upnext/","title":"KVM","text":""},{"location":"upnext/#purpose","title":"Purpose","text":"<p>This is a list of projects and topics I want to explore and implement in my homelab</p>"},{"location":"upnext/#up-next","title":"Up Next","text":"<ul> <li>Kubernetes</li> <li>ZTNA</li> <li>Web Development</li> </ul>"},{"location":"homelab/layout/","title":"Homelab Layout","text":""},{"location":"homelab/layout/#hardware","title":"Hardware","text":"<ul> <li>Dell R720  <ul> <li>2x20 Core CPU</li> <li>128GB RAM</li> <li>1TB SSD</li> <li>Array 6x 9TB HHD</li> </ul> </li> </ul>"},{"location":"homelab/layout/#vms","title":"VMs","text":"<ul> <li>NAS<ul> <li>16 vCPU</li> <li>64GB RAM</li> </ul> </li> <li>Docker<ul> <li>16 vCPU</li> <li>16GB RAM</li> </ul> </li> <li>GitLab<ul> <li>8 vCPU</li> <li>32GB RAM</li> </ul> </li> <li>HomeAssistant<ul> <li>8 vCPU</li> <li>4GB RAM</li> </ul> </li> </ul>"},{"location":"homelab/layout/#services","title":"Services","text":"<ul> <li>Docker</li> <li>Vaultwarden</li> <li>Nginx Proxy Manager</li> <li>Portainer</li> <li>Immich</li> <li>Gitlab Runner</li> <li>Homepage</li> <li>Homebridge</li> <li>Lidarr</li> <li>Overseerr</li> <li>Sonarr</li> <li>Lidarr</li> <li>qBittorrent</li> <li>Bazarr</li> </ul>"},{"location":"homelab/layout/#networking","title":"Networking","text":""},{"location":"homelab/layout/#external-access","title":"External Access","text":"<p>Services can be accessed by either a VPN or by the domain name. The WireGuard VPN server is hosted on the Ubiquiti Dream Machine Pro Router. When connecting through the domain name, requests are routed through the internet to the homelab\u2019s public IP address. From there, the router forwards the traffic to the reverse proxy, which handles SSL termination and directs the request to the correct internal service based on the hostname or path. This allows multiple services to be hosted on the same IP while still being securely accessible from anywhere.  </p> <pre><code>architecture-beta\n    group lab(cloud)[Homelab]\n\n    service npm(server)[Nginx Proxy Manager] in lab\n    service containers(server) [Docker Containers] in lab\n\n    service internet(internet)[Internet]\n\n    npm:R -- L:internet\n    containers:T -- B:npm</code></pre>"},{"location":"linux/kvm/","title":"KVM","text":""},{"location":"linux/kvm/#purpose","title":"Purpose","text":"<p>Unfortunately, sometimes I am forced to use Windows for various programs (CAD, Adobe, Microsoft, etc.) thus I need access to a Windows machine. I could dual boot but my use of Windows will be temporary and short lived (hopefully). I could run windows in a typical VM (VMware or VirtualBox) - but whats the fun in that. The purpose of using KVM is to deepen my understanding of Linux systems, KVM, QEMU, IOMMU, and most importantly, VFIO. My goal is to passthrough components like storage and GPU to the Windows VM to get near native performance. I will use Looking Glass as my \"Viewport\" into the Windows VM. Looking Glass uses shared memory segment which enables extremely high throughput low latency guest to host communication.</p>"},{"location":"linux/kvm/#configuration-and-installation","title":"Configuration and Installation","text":"<ol> <li> <p>QEMU, KVM, Virt-manager dependencies</p> <pre><code> yay -S qemu virt-manager virt-viewer dnsmasq vde2 bridge-utils openbsd-netcat ebtables iptables libguestfs dmidecode swtpm\n</code></pre> </li> <li> <p>Configure GPU passthrough with quickpassthrough</p> <ol> <li>Download latest release</li> <li>Extract     <pre><code>tar -xf archive.tar --one-top-level=quickpassthrough\n</code></pre></li> <li>Run script     <pre><code>./quickpassthrough\n</code></pre></li> </ol> </li> <li>Download Windows ISO</li> <li>Create VM<ol> <li>CPU Topology<ul> <li>Manually set CPU topology</li> <li>Set sockets, cores, and threads appropriately</li> </ul> </li> <li>Memory<ul> <li>Ensure <code>Enabled shared memory</code> is unchecked</li> </ul> </li> <li>Remove <code>Tablet</code> device</li> <li>TPM<ul> <li>Emulated</li> <li>Model: TIS</li> <li>Version: 2.0</li> </ul> </li> <li>Passthrough ALL devices related to GPU that was passedthrough</li> </ol> </li> <li>Install Looking Glass</li> </ol>"},{"location":"linux/kvm/#resources","title":"Resources","text":"<ol> <li>GPU Passthrough</li> <li>VFIO Setup docs</li> <li>Looking Glass Docs</li> </ol>"}]}